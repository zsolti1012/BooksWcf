//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BooksLogin.BooksService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BooksService.IBooksService")]
    public interface IBooksService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/ListAll", ReplyAction="http://tempuri.org/IBooksService/ListAllResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.LoginFailedFault), Action="http://tempuri.org/IBooksService/ListAllLoginFailedFaultFault", Name="LoginFailedFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.NoAvailableBookFault), Action="http://tempuri.org/IBooksService/ListAllNoAvailableBookFaultFault", Name="NoAvailableBookFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        BooksWcf.Book[] ListAll(BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/ListAll", ReplyAction="http://tempuri.org/IBooksService/ListAllResponse")]
        System.Threading.Tasks.Task<BooksWcf.Book[]> ListAllAsync(BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/ListById", ReplyAction="http://tempuri.org/IBooksService/ListByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.LoginFailedFault), Action="http://tempuri.org/IBooksService/ListByIdLoginFailedFaultFault", Name="LoginFailedFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.BookNotFoundFault), Action="http://tempuri.org/IBooksService/ListByIdBookNotFoundFaultFault", Name="BookNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        BooksWcf.Book[] ListById(string id, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/ListById", ReplyAction="http://tempuri.org/IBooksService/ListByIdResponse")]
        System.Threading.Tasks.Task<BooksWcf.Book[]> ListByIdAsync(string id, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Insert", ReplyAction="http://tempuri.org/IBooksService/InsertResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.LoginFailedFault), Action="http://tempuri.org/IBooksService/InsertLoginFailedFaultFault", Name="LoginFailedFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        bool Insert(string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Insert", ReplyAction="http://tempuri.org/IBooksService/InsertResponse")]
        System.Threading.Tasks.Task<bool> InsertAsync(string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Update", ReplyAction="http://tempuri.org/IBooksService/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.LoginFailedFault), Action="http://tempuri.org/IBooksService/UpdateLoginFailedFaultFault", Name="LoginFailedFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        bool Update(string id, string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Update", ReplyAction="http://tempuri.org/IBooksService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(string id, string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Delete", ReplyAction="http://tempuri.org/IBooksService/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.LoginFailedFault), Action="http://tempuri.org/IBooksService/DeleteLoginFailedFaultFault", Name="LoginFailedFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        bool Delete(string id, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Delete", ReplyAction="http://tempuri.org/IBooksService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string id, BooksWcf.User client, string loginfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Login", ReplyAction="http://tempuri.org/IBooksService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.LoginFailedFault), Action="http://tempuri.org/IBooksService/LoginLoginFailedFaultFault", Name="LoginFailedFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        BooksWcf.User Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Login", ReplyAction="http://tempuri.org/IBooksService/LoginResponse")]
        System.Threading.Tasks.Task<BooksWcf.User> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Logout", ReplyAction="http://tempuri.org/IBooksService/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BooksWcf.LoginFailedFault), Action="http://tempuri.org/IBooksService/LogoutLoginFailedFaultFault", Name="LoginFailedFault", Namespace="http://schemas.datacontract.org/2004/07/BooksWcf")]
        bool Logout(BooksWcf.User client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBooksService/Logout", ReplyAction="http://tempuri.org/IBooksService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(BooksWcf.User client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBooksServiceChannel : BooksLogin.BooksService.IBooksService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BooksServiceClient : System.ServiceModel.ClientBase<BooksLogin.BooksService.IBooksService>, BooksLogin.BooksService.IBooksService {
        
        public BooksServiceClient() {
        }
        
        public BooksServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BooksServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BooksServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BooksServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BooksWcf.Book[] ListAll(BooksWcf.User client, string loginfo) {
            return base.Channel.ListAll(client, loginfo);
        }
        
        public System.Threading.Tasks.Task<BooksWcf.Book[]> ListAllAsync(BooksWcf.User client, string loginfo) {
            return base.Channel.ListAllAsync(client, loginfo);
        }
        
        public BooksWcf.Book[] ListById(string id, BooksWcf.User client, string loginfo) {
            return base.Channel.ListById(id, client, loginfo);
        }
        
        public System.Threading.Tasks.Task<BooksWcf.Book[]> ListByIdAsync(string id, BooksWcf.User client, string loginfo) {
            return base.Channel.ListByIdAsync(id, client, loginfo);
        }
        
        public bool Insert(string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo) {
            return base.Channel.Insert(name, rating, lenght, releaseYear, client, loginfo);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAsync(string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo) {
            return base.Channel.InsertAsync(name, rating, lenght, releaseYear, client, loginfo);
        }
        
        public bool Update(string id, string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo) {
            return base.Channel.Update(id, name, rating, lenght, releaseYear, client, loginfo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(string id, string name, string rating, string lenght, string releaseYear, BooksWcf.User client, string loginfo) {
            return base.Channel.UpdateAsync(id, name, rating, lenght, releaseYear, client, loginfo);
        }
        
        public bool Delete(string id, BooksWcf.User client, string loginfo) {
            return base.Channel.Delete(id, client, loginfo);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string id, BooksWcf.User client, string loginfo) {
            return base.Channel.DeleteAsync(id, client, loginfo);
        }
        
        public BooksWcf.User Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<BooksWcf.User> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(BooksWcf.User client) {
            return base.Channel.Logout(client);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(BooksWcf.User client) {
            return base.Channel.LogoutAsync(client);
        }
    }
}
